# Enhanced Multi-stage Dockerfile with Node.js for Digital Ocean Deployment
# =========================================================================

# Stage 1: Node.js Frontend Builder
FROM node:22-alpine as frontend-builder

WORKDIR /frontend

# Copy frontend package files
COPY src/dashboard/frontend/package*.json ./

# Install frontend dependencies
RUN npm ci --only=production

# Copy frontend source
COPY src/dashboard/frontend/ ./

# Build frontend (if build script exists)
RUN npm run build 2>/dev/null || echo "No build script found, using source files"

# Stage 2: Python Builder
FROM python:3.11-slim as python-builder

WORKDIR /app

# Install system dependencies for Python packages
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    make \
    libffi-dev \
    libssl-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir --user -r requirements.txt

# Stage 3: Production Runtime with Node.js
FROM node:22-alpine as production

# Install Python and required system packages
RUN apk add --no-cache \
    python3 \
    py3-pip \
    sqlite \
    curl \
    && ln -sf python3 /usr/bin/python \
    && ln -sf pip3 /usr/bin/pip

# Create non-root user
RUN addgroup -g 1001 -S appuser && \
    adduser -S appuser -u 1001 -G appuser

# Set working directory
WORKDIR /app

# Copy Python dependencies from builder stage
COPY --from=python-builder --chown=appuser:appuser /root/.local /home/appuser/.local

# Copy frontend build from frontend builder
COPY --from=frontend-builder --chown=appuser:appuser /frontend /app/src/dashboard/frontend

# Copy application source code
COPY --chown=appuser:appuser src/ ./src/
COPY --chown=appuser:appuser config/ ./config/
COPY --chown=appuser:appuser README.md .
COPY --chown=appuser:appuser requirements.txt .

# Create necessary directories
RUN mkdir -p logs data config/secrets && \
    chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Set environment variables
ENV PATH=/home/appuser/.local/bin:$PATH
ENV PYTHONPATH=/app
ENV NODE_ENV=production
ENV PYTHON_ENV=production

# Verify installations
RUN node -v && npm -v && python --version && pip --version

# Health check for both Python and Node.js
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Expose ports
EXPOSE 8080 3000

# Create startup script
RUN echo '#!/bin/sh' > start.sh && \
    echo 'echo "🚀 Starting Trading Bot with Node.js v$(node -v) and Python v$(python --version)"' >> start.sh && \
    echo 'echo "📊 Node.js Path: $(which node)"' >> start.sh && \
    echo 'echo "🐍 Python Path: $(which python)"' >> start.sh && \
    echo 'echo "📦 NPM Version: $(npm -v)"' >> start.sh && \
    echo 'echo "🔧 Starting application..."' >> start.sh && \
    echo 'exec python -m src.main' >> start.sh && \
    chmod +x start.sh

# Run the enhanced startup script
CMD ["./start.sh"]