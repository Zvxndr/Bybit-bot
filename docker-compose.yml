version: '3.8'

services:
  # Trading bot application
  trading-bot:
    build: .
    container_name: bybit-trading-bot
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - BYBIT_API_KEY=${BYBIT_API_KEY}
      - BYBIT_API_SECRET=${BYBIT_API_SECRET}
      - DB_HOST=postgres
      - DB_NAME=trading_bot
      - DB_USER=trader
      - DB_PASSWORD=${DB_PASSWORD}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./config:/app/config
    depends_on:
      - postgres
      - redis
    networks:
      - trading-network
    ports:
      - "8501:8501"  # Streamlit dashboard
    
  # PostgreSQL database for production
  postgres:
    image: postgres:15-alpine
    container_name: trading-bot-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=trading_bot
      - POSTGRES_USER=trader
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    networks:
      - trading-network
    ports:
      - "5432:5432"
    
  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: trading-bot-redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - trading-network
    ports:
      - "6379:6379"
    
  # Nginx reverse proxy (optional for production)
  nginx:
    image: nginx:alpine
    container_name: trading-bot-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - trading-bot
    networks:
      - trading-network
    profiles:
      - production

# Development override
  # Development database (DuckDB is embedded, no separate service needed)
  
# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

# Network configuration
networks:
  trading-network:
    driver: bridge

---
# Development compose override
# Use: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
version: '3.8'

services:
  trading-bot-dev:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: bybit-trading-bot-dev
    restart: "no"
    environment:
      - ENVIRONMENT=development
      - BYBIT_API_KEY=${BYBIT_API_KEY}
      - BYBIT_API_SECRET=${BYBIT_API_SECRET}
    volumes:
      - .:/app  # Mount entire project for development
      - ./logs:/app/logs
      - ./data:/app/data
    ports:
      - "8501:8501"  # Streamlit dashboard
      - "5000:5000"  # Debug port
    networks:
      - trading-network
    command: ["python", "-m", "src.bot.main", "--debug"]
    
  # Development uses DuckDB (no postgres needed)
  # Redis still useful for development
  redis-dev:
    image: redis:7-alpine
    container_name: trading-bot-redis-dev
    restart: "no"
    ports:
      - "6379:6379"
    networks:
      - trading-network